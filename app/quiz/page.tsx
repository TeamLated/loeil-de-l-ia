"use client";

import { useState } from "react";
import Link from "next/link";

// Types
type NormalQuestion = {
  type: "normal";
  realImg: string;
  aiImg: string;
  isRealLeft: boolean;
};

type SpecialQuestion = {
  type: "special";
  img: string;
  isReal: boolean;
};

type Question = NormalQuestion | SpecialQuestion;

export default function QuizPage() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [finished, setFinished] = useState(false);
  const [answered, setAnswered] = useState(false);
  const [isCorrectAnswer, setIsCorrectAnswer] = useState<boolean | null>(null);
  const [feedback, setFeedback] = useState("");
  const [feedbackType, setFeedbackType] = useState<"funfact" | "artip" | null>(
    null
  );

  const funFacts = [
    "En 2018, un tableau g√©n√©r√© par IA a √©t√© vendu pour 432 500$ (Portrait d‚ÄôEdmond de Belamy).",
    "La g√©n√©ration d‚Äôun Starter Pack IA consomme plusieurs litres d‚Äôeau.",
    "Hayao Miyazaki d√©non√ßait d√®s 2013 les dangers de 'machines qui dessinent'.",
    "ChatGPT traite plus d‚Äôun milliard de requ√™tes par jour pour 400M d‚Äôutilisateurs.",
    "D'ici 2030, la consommation d'√©nergie des datas centers va doubler.",
    "Une vraie photo d'un flamant rose a gagn√© un concours car elle semblait g√©n√©r√©e par IA.",
    "Boris Eldagsen a gagn√© un concours photo avec une ≈ìuvre IA mais a refus√© la r√©compense.",
    "L'IA peine √† comprendre le mouvement logique dans une armure de jeu vid√©o.",
    "Le regard et les mains sont souvent d√©form√©s dans les ≈ìuvres IA.",
    "Les galeries IA m√©langent souvent plusieurs styles incoh√©rents.",
  ];

  const artips = [
    "Regardez les mains : souvent l'IA g√©n√®re trop ou pas assez de doigts.",
    "Les yeux peuvent para√Ætre vides ou √©tranges sur les images IA.",
    "Le design logique (mouvements, armures) est souvent absent chez l'IA.",
    "L'intention narrative est souvent inexistante dans les images IA.",
    "Surveillez un √©clairage trop uniforme sur les ≈ìuvres IA.",
    "Les styles graphiques sont m√©lang√©s sans logique.",
    "Plus vous regardez longtemps, plus vous voyez des d√©fauts sur une image IA.",
    "Les contrastes sont souvent mal g√©r√©s dans les images IA.",
    "Les personnages secondaires sont souvent monstrueux.",
    "Les √©motions complexes sont tr√®s mal retranscrites par l'IA.",
  ];

  const questions: Question[] = [
    {
      type: "normal",
      realImg: "/images/Vraieoeuvre1.png",
      aiImg: "/images/Fausseoeuvre1.png",
      isRealLeft: true,
    },
    {
      type: "normal",
      realImg: "/images/Vraieoeuvre2.png",
      aiImg: "/images/Fausseoeuvre2.png",
      isRealLeft: false,
    },
    {
      type: "normal",
      realImg: "/images/Vraieoeuvre3.png",
      aiImg: "/images/Fausseoeuvre3.png",
      isRealLeft: true,
    },
    {
      type: "normal",
      realImg: "/images/Vraieoeuvre4.png",
      aiImg: "/images/Fausseoeuvre4.png",
      isRealLeft: false,
    },
    {
      type: "normal",
      realImg: "/images/Vraieoeuvre5.png",
      aiImg: "/images/Fausseoeuvre5.png",
      isRealLeft: true,
    },
    {
      type: "normal",
      realImg: "/images/Vraieoeuvre6.png",
      aiImg: "/images/Fausseoeuvre6.png",
      isRealLeft: false,
    },
    {
      type: "normal",
      realImg: "/images/Vraieoeuvre7.png",
      aiImg: "/images/Fausseoeuvre7.png",
      isRealLeft: true,
    },
    { type: "special", img: "/images/VraiSpeciale1.png", isReal: true },
    { type: "special", img: "/images/VraiSpeciale2.png", isReal: true },
    { type: "special", img: "/images/FauxSpeciale1.png", isReal: false },
  ];

  const handleAnswer = (isCorrect: boolean) => {
    if (answered) return;
    setIsCorrectAnswer(isCorrect);
    setFeedback(
      isCorrect
        ? funFacts[Math.floor(Math.random() * funFacts.length)]
        : artips[Math.floor(Math.random() * artips.length)]
    );
    setFeedbackType(isCorrect ? "funfact" : "artip");
    if (isCorrect) setScore((prev) => prev + 1);
    setAnswered(true);
  };

  const nextQuestion = () => {
    if (currentQuestion + 1 < questions.length) {
      setCurrentQuestion((prev) => prev + 1);
      setAnswered(false);
      setIsCorrectAnswer(null);
      setFeedback("");
      setFeedbackType(null);
    } else {
      setFinished(true);
    }
  };

  const restartQuiz = () => window.location.reload();
  const current = questions[currentQuestion];
  return (
    <main className="quiz">
      <header className="quizHeader">
        <Link href="/">
          <button className="homeButton">üè† Retour Accueil</button>
        </Link>
      </header>

      {!finished ? (
        <section className="quizSection">
          <h2 className="quizQuestionTitle">
            Question {currentQuestion + 1} / {questions.length}
          </h2>
          <p className="quizSubTitle">
            {current.type === "normal"
              ? "Quelle est la vraie ≈ìuvre ?"
              : "Cette ≈ìuvre est-elle humaine ou g√©n√©r√©e par IA ?"}
          </p>

          {current.type === "normal" ? (
            <div className="imagesContainer">
              <img
                src={current.isRealLeft ? current.realImg : current.aiImg}
                alt="Choix gauche"
                onClick={() => handleAnswer(current.isRealLeft)}
                className={`quizImage ${
                  answered ? (current.isRealLeft ? "correct" : "incorrect") : ""
                }`}
              />
              <img
                src={!current.isRealLeft ? current.realImg : current.aiImg}
                alt="Choix droite"
                onClick={() => handleAnswer(!current.isRealLeft)}
                className={`quizImage ${
                  answered
                    ? !current.isRealLeft
                      ? "correct"
                      : "incorrect"
                    : ""
                }`}
              />
            </div>
          ) : (
            <div className="specialImageContainer">
              <img
                src={current.img}
                alt="Oeuvre sp√©ciale"
                className="quizImage"
              />
              <div className="specialButtons">
                <button
                  className="choiceButton"
                  onClick={() => handleAnswer(current.isReal)}
                  disabled={answered}
                >
                  Vraie ≈ìuvre
                </button>
                <button
                  className="choiceButton"
                  onClick={() => handleAnswer(!current.isReal)}
                  disabled={answered}
                >
                  ≈íuvre IA
                </button>
              </div>
            </div>
          )}

          {answered && (
            <>
              <div className="feedback fade-in">
                <div
                  style={{
                    color: isCorrectAnswer ? "#22c55e" : "#ef4444",
                    fontWeight: "bold",
                    fontSize: "1.5rem",
                    marginBottom: "1rem",
                  }}
                >
                  {isCorrectAnswer
                    ? "‚úÖ Bonne r√©ponse !"
                    : "‚ùå Mauvaise r√©ponse."}
                </div>
                <strong>
                  {feedbackType === "funfact" ? "FUN FACT :" : "ARTIPS :"}
                </strong>{" "}
                {feedback}
              </div>
              <div className="nextButtonContainer">
                <button className="nextButton" onClick={nextQuestion}>
                  ‚û°Ô∏è Question suivante
                </button>
              </div>
            </>
          )}
        </section>
      ) : (
        <section className="resultSection">
          <h2 className="resultTitle">
            Votre Score : {score} / {questions.length}
          </h2>
          <p className="resultComment">
            {score <= 4 && "Ouch ! Tu peux progresser..."}
            {score >= 5 &&
              score <= 7 &&
              "Pas mal ! Tu commences √† faire la diff√©rence."}
            {score >= 8 &&
              score <= 9 &&
              "Tr√®s bien jou√© ! Ton ≈ìil est presque infaillible."}
            {score === 10 && "Parfait ! Tu es un expert de l'art face √† l'IA !"}
          </p>
          <div className="buttonsFinal">
            <button className="startButton" onClick={restartQuiz}>
              üîÑ Rejouer
            </button>
            <Link href="/remerciements">
              <button className="startButton">üèÅ Finir le Test</button>
            </Link>
          </div>
        </section>
      )}

      <style jsx>{`
        .quiz {
          padding: 2rem;
          max-width: 900px;
          margin: auto;
          text-align: center;
        }
        .quizHeader {
          margin-bottom: 2rem;
        }
        .homeButton {
          background: #6d28d9;
          color: white;
          padding: 0.8rem 1.2rem;
          border-radius: 8px;
          border: none;
          font-size: 1rem;
          cursor: pointer;
        }
        .quizQuestionTitle {
          font-size: 2rem;
          margin-bottom: 0.5rem;
        }
        .quizSubTitle {
          font-size: 1.2rem;
          margin-bottom: 2rem;
        }
        .imagesContainer {
          display: flex;
          justify-content: center;
          gap: 2rem;
          margin-bottom: 2rem;
        }
        .quizImage {
          width: 45%;
          cursor: pointer;
          transition: transform 0.3s, border 0.3s;
          border: 5px solid transparent;
          border-radius: 12px;
        }
        .quizImage:hover {
          transform: scale(1.03);
        }
        .correct {
          border-color: #22c55e;
        }
        .incorrect {
          border-color: #ef4444;
        }
        .specialImageContainer {
          margin-bottom: 2rem;
        }
        .specialButtons {
          display: flex;
          justify-content: center;
          gap: 1rem;
          margin-top: 1.5rem;
        }
        .choiceButton {
          padding: 0.8rem 1.5rem;
          background-color: #4f46e5;
          color: white;
          border: none;
          border-radius: 10px;
          font-size: 1.1rem;
          cursor: pointer;
        }
        .choiceButton:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }
        .feedback {
          margin-top: 2rem;
          font-size: 1.2rem;
        }
        .fade-in {
          animation: fadeIn 0.8s ease-in-out;
        }
        @keyframes fadeIn {
          from {
            opacity: 0;
          }
          to {
            opacity: 1;
          }
        }
        .nextButtonContainer {
          margin-top: 2rem;
        }
        .nextButton {
          background: #10b981;
          color: white;
          padding: 1rem 2rem;
          font-size: 1.2rem;
          border: none;
          border-radius: 10px;
          cursor: pointer;
        }
        .resultSection {
          margin-top: 3rem;
        }
        .resultTitle {
          font-size: 2.5rem;
          margin-bottom: 1rem;
        }
        .resultComment {
          font-size: 1.5rem;
          margin-bottom: 2rem;
        }
        .buttonsFinal {
          display: flex;
          justify-content: center;
          gap: 1rem;
        }
        .startButton {
          background: #6366f1;
          color: white;
          padding: 1rem 2rem;
          font-size: 1.2rem;
          border: none;
          border-radius: 10px;
          cursor: pointer;
        }
      `}</style>
    </main>
  );
}
